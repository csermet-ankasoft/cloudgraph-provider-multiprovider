type awsSageMakerNotebookInstance implements awsBaseService
  @key(fields: "arn") {
  notebookInstanceName: String @search(by: [hash, regexp])
  notebookInstanceStatus: String @search(by: [hash, regexp])
  failureReason: String @search(by: [hash, regexp])
  url: String @search(by: [hash, regexp])
  instanceType: String @search(by: [hash, regexp])
  subnetId: String @search(by: [hash, regexp])
  securityGroupIds: [String] @search(by: [hash, regexp])
  acceleratorTypes: [String] @search(by: [hash, regexp])
  creationTime: DateTime @search(by: [day])
  lastModifiedTime: DateTime @search(by: [day])
  roleArn: String @search(by: [hash, regexp])
  kmsKeyId: String @search(by: [hash, regexp])
  networkInterfaceId: String @search(by: [hash, regexp])
  notebookInstanceLifecycleConfigName: String @search(by: [hash, regexp])
  directInternetAccess: String @search(by: [hash, regexp])
  volumeSizeInGb: Int @search
  defaultCodeRepository: String @search(by: [hash, regexp])
  additionalCodeRepositories: [String] @search(by: [hash, regexp])
  rootAccess: String @search(by: [hash, regexp])
  platformIdentifier: String @search(by: [hash, regexp])
  iamRole: [awsIamRole] @hasInverse(field: sageMakerNotebookInstances)
  networkInterface: [awsNetworkInterface]
    @hasInverse(field: sageMakerNotebookInstances)
  subnet: [awsSubnet] @hasInverse(field: sageMakerNotebookInstances)
  kms: [awsKms] @hasInverse(field: sageMakerNotebookInstances)
  securityGroups: [awsSecurityGroup]
    @hasInverse(field: sageMakerNotebookInstances)
}
