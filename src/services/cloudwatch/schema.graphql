type awsCloudwatch implements awsBaseService @key(fields: "arn") {
  metric: String @search(by: [hash])
  namespace: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp, fulltext])
  actionsEnabled: String @search(by: [hash, regexp])
  actions: [String] @search(by: [hash, regexp])
  comparisonOperator: String @search(by: [hash, regexp])
  statistic: String @search(by: [hash])
  threshold: String @search(by: [hash, regexp])
  period: String @search(by: [hash, regexp])
  evaluationPeriods: Int @search
  dimensions: [awsCloudwatchDimensions]
  tags: [awsRawTag]
  cloudwatchLog: [awsCloudwatchLog] @hasInverse(field: cloudwatch)
  sns: [awsSns] @hasInverse(field: cloudwatch)
  cloudtrail: [awsCloudtrail] @hasInverse(field: cloudwatch)
  cloudfront: [awsCloudfront] @hasInverse(field: cloudwatch)
}

type awsCloudwatchDimensions
  @generate(
    # About the need to be able to query dimensions,
    # I think they may be useful because you can specify
    # any number name/value pairs to use as part of the identity of a metric.
    # Check !2 merge request example
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  name: String @search(by: [hash, regexp])
  value: String @search(by: [hash, regexp])
}
