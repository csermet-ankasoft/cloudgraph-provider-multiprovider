type awsCloudtrail implements awsOptionalService @key(fields: "id") {
  name: String @search(by: [hash, regexp])
  s3BucketName: String @search(by: [hash, regexp])
  s3KeyPrefix: String @search(by: [hash, regexp])
  includeGlobalServiceEvents: String @search(by: [hash, regexp])
  isMultiRegionTrail: String @search(by: [hash, regexp])
  homeRegion: String @search(by: [hash, regexp])
  logFileValidationEnabled: String @search(by: [hash, regexp])
  cloudWatchLogsLogGroupArn: String @search(by: [hash, regexp])
  cloudWatchLogsRoleArn: String @search(by: [hash, regexp]) # add iamRole connection here
  kmsKeyId: String @search(by: [hash, regexp])
  hasCustomEventSelectors: String @search(by: [hash, regexp])
  hasInsightSelectors: String @search(by: [hash, regexp])
  isOrganizationTrail: String @search(by: [hash, regexp])
  status: awsCloudtrailStatus
  eventSelectors: [awsCloudtrailEventSelector]
  tags: [awsRawTag]
  s3: [awsS3] @hasInverse(field: cloudtrails)
  sns: [awsSns] @hasInverse(field: cloudtrail)
  kms: [awsKms] @hasInverse(field: cloudtrail)
  cloudwatchLog: [awsCloudwatchLog] @hasInverse(field: cloudtrail)
  cloudwatch: [awsCloudwatch] @hasInverse(field: cloudtrail)
}

type awsCloudtrailStatus {
  isLogging: Boolean @search
  latestDeliveryTime: String @search(by: [hash, regexp])
  latestNotificationTime: String @search(by: [hash, regexp])
  startLoggingTime: String @search(by: [hash, regexp])
  latestDigestDeliveryTime: String @search(by: [hash, regexp])
  latestDeliveryAttemptTime: String @search(by: [hash, regexp])
  latestNotificationAttemptTime: String @search(by: [hash, regexp])
  latestNotificationAttemptSucceeded: String @search(by: [hash, regexp])
  latestDeliveryAttemptSucceeded: String @search(by: [hash, regexp])
  latestCloudWatchLogsDeliveryTime: String @search(by: [hash, regexp])
  timeLoggingStarted: String @search(by: [hash, regexp])
  timeLoggingStopped: String @search(by: [hash, regexp])
}

type awsCloudtrailEventSelector
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  readWriteType: String @search(by: [hash, regexp])
  includeManagementEvents: Boolean @search
  dataResources: [awsCloudtrailDataResource]
}

type awsCloudtrailDataResource
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id @search(by: [hash])
  type: String @search(by: [hash, regexp])
  values: [String] @search(by: [hash, regexp])
}
