type awsClientVpnEndpoint implements awsBaseService @key(fields: "arn") {
  status: String @search(by: [hash, regexp])
  creationTime: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp])
  deletionTime: String @search(by: [hash, regexp])
  dnsName: String @search(by: [hash, regexp])
  clientCidrBlock: String @search(by: [hash, regexp])
  dnsServers: [String] @search(by: [hash])
  splitTunnel: Boolean @search
  vpnProtocol: String @search(by: [hash, regexp])
  transportProtocol: String @search(by: [hash, regexp])
  vpnPort: Int @search
  tags: [awsRawTag]
  associatedTargetNetworks: [awsAssociatedTargetNetworks]
  serverCertificateArn: String @search(by: [hash, regexp])
  authenticationOptions: [awsClientVpnAuthentication]
  connectionLogOptions: awsConnectionLogResponseOptions
  securityGroupIds: [String] @search(by: [hash])
  clientConnectOptions: awsClientConnectResponseOptions
  securityGroups: [awsSecurityGroup] @hasInverse(field: clientVpnEndpoint)
}

type awsAssociatedTargetNetworks
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  networkId: String @search(by: [hash])
  networkType: String @search(by: [hash, regexp])
}

type awsClientVpnAuthentication
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  type: String @search(by: [hash, regexp])
  activeDirectory: awsDirectoryServiceAuthenticationRequest
  mutualAuthentication: awsCertificateAuthenticationRequest
  federatedAuthentication: awsFederatedAuthentication
}

type awsDirectoryServiceAuthenticationRequest
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  directoryId: String @search(by: [hash, regexp])
}

type awsCertificateAuthenticationRequest
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  clientRootCertificateChain: String @search(by: [hash, regexp])
}

type awsFederatedAuthentication
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  samlProviderArn: String @search(by: [hash, regexp])
  selfServiceSamlProviderArn: String @search(by: [hash, regexp])
}

type awsConnectionLogResponseOptions
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
  cloudwatchLogGroup: String @search(by: [hash, regexp])
  cloudwatchLogStream: String @search(by: [hash, regexp])
}

type awsClientConnectResponseOptions
  @generate(
    query: { get: true, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  enabled: Boolean @search
  lambdaFunctionArn: String @search(by: [hash, regexp])
  status: String @search(by: [hash, regexp])
}
